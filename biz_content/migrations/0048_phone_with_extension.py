# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2017-01-18 20:12
from __future__ import unicode_literals
from itertools import chain
from django.db import migrations, models
from django.core.serializers.json import DjangoJSONEncoder
from wagtail.wagtailcore.blocks.stream_block import StreamValue
from json import dumps, loads


block_type = 'phone_number'

def ten_to_ext(block):
    return {
        'type': 'phone_number',
        'value': {
            block_type: block['value'],
            'ext': None,
        }
    }


def ext_to_ten(block):
    return {
        'type': block_type,
        'value': block['value']['phone_number'],
    }


def get_stream_data(obj, mapper):
    stream_data = []

    for block in obj.page_content.stream_data:
        if block['type'] == block_type:
            stream_data.append(mapper(block))
        else:
            stream_data.append(block)

    return stream_data


def handle_object(obj, mapper):
    stream_data = get_stream_data(obj, mapper)

    if stream_data:
        raw_text = dumps(stream_data, cls=DjangoJSONEncoder)
        stream_block = obj.page_content.stream_block
        obj.page_content = StreamValue(stream_block, [],
            is_lazy=True, raw_text=raw_text)
        obj.save()


def handle_revision_data(data, mapper):
    page_content = loads(data['page_content'])
    for i, block in enumerate(page_content):
        if block['type'] == block_type:
            page_content[i] = mapper(block)
    data['page_content'] = dumps(page_content, cls=DjangoJSONEncoder)
    return data


def migrate(apps, mapper):
    collection_pages = apps.get_model('biz_content',
                                      'CollectionPage').objects.all()
    step_pages = apps.get_model('biz_content', 'StepPage').objects.all()

    for obj in chain(collection_pages, step_pages):
        handle_object(obj, mapper)
        for rev in obj.revisions.all():
            json = loads(rev.content_json)
            json = handle_revision_data(json, mapper)
            json = dumps(json)
            rev.content_json = json
            rev.save()


def forwards(apps, schema_editor):
    migrate(apps, ten_to_ext)


def backwards(apps, schema_editor):
    migrate(apps, ext_to_ten)


class Migration(migrations.Migration):

    dependencies = [
        ('biz_content', '0047_auto_phone_extension'),
    ]

    operations = [
        migrations.RunPython(forwards, backwards),
    ]
